{"version":3,"sources":["../src/index.ts","../src/modules/constants.ts","../src/modules/invariant.ts","../src/modules/css-colors.ts","../src/modules/validators.ts","../src/modules/utils.ts","../src/converters/index.ts","../src/format-hex.ts","../src/converters/hex2rgb.ts","../src/converters/rgb2hsl.ts","../src/converters/hex2hsl.ts","../src/converters/rgb2oklab.ts","../src/converters/hex2oklab.ts","../src/converters/oklab2oklch.ts","../src/converters/rgb2oklch.ts","../src/converters/hex2oklch.ts","../src/modules/hue2rgb.ts","../src/converters/hsl2rgb.ts","../src/converters/rgb2hex.ts","../src/converters/hsl2hex.ts","../src/converters/hsl2oklab.ts","../src/converters/hsl2oklch.ts","../src/converters/oklab2rgb.ts","../src/converters/oklab2hex.ts","../src/converters/oklab2hsl.ts","../src/converters/oklch2oklab.ts","../src/converters/oklch2rgb.ts","../src/converters/oklch2hex.ts","../src/converters/oklch2hsl.ts","../src/modules/hex-utils.ts","../src/extract-color-parts.ts","../src/parse-css.ts","../src/brightness-difference.ts","../src/chroma.ts","../src/color-difference.ts","../src/luminance.ts","../src/contrast.ts","../src/compare.ts","../src/format-css.ts","../src/modules/updater.ts","../src/darken.ts","../src/desaturate.ts","../src/rotate.ts","../src/invert.ts","../src/lighten.ts","../src/modules/parse-color.ts","../src/opacify.ts","../src/opacity.ts","../src/saturate.ts","../src/text-color.ts","../src/transparentize.ts","../src/colorizr.ts","../src/convert.ts","../src/is-valid-color.ts","../src/name.ts","../src/p3.ts","../src/palette.ts","../src/random.ts","../src/scheme.ts","../src/swatch.ts"],"sourcesContent":["import Colorizr from '~/colorizr';\r\n\r\nexport { default as brightnessDifference } from '~/brightness-difference';\r\nexport { default as chroma } from '~/chroma';\r\nexport { default as colorDifference } from '~/color-difference';\r\nexport type { ColorizrOptions } from '~/colorizr';\r\nexport { default as compare } from '~/compare';\r\nexport { default as contrast } from '~/contrast';\r\nexport { default as convert } from '~/convert';\r\nexport * from '~/converters';\r\nexport { default as darken } from '~/darken';\r\nexport { default as desaturate } from '~/desaturate';\r\nexport { default as extractColorParts } from '~/extract-color-parts';\r\nexport { default as formatCSS } from '~/format-css';\r\nexport type { FormatCSSOptions } from '~/format-css';\r\nexport { default as formatHex } from '~/format-hex';\r\nexport { default as isValidColor } from '~/is-valid-color';\r\nexport { default as lighten } from '~/lighten';\r\nexport { default as luminance } from '~/luminance';\r\nexport * from '~/modules/hex-utils';\r\nexport { isHex, isHSL, isLAB, isLCH, isRGB } from '~/modules/validators';\r\nexport { default as name } from '~/name';\r\nexport { default as opacify } from '~/opacify';\r\nexport { default as opacity } from '~/opacity';\r\nexport { getOkLCHMaxChroma, getP3Color } from '~/p3';\r\nexport { default as palette } from '~/palette';\r\nexport type { PaletteOptions } from '~/palette';\r\nexport { default as parseCSS } from '~/parse-css';\r\nexport { default as random } from '~/random';\r\n\r\nexport { default as rotate } from '~/rotate';\r\nexport { default as saturate } from '~/saturate';\r\nexport { default as scheme } from '~/scheme';\r\nexport type { Scheme, SchemeOptions } from '~/scheme';\r\n\r\nexport { default as swatch } from '~/swatch';\r\nexport type { Swatch, SwatchOptions, SwatchVariant } from '~/swatch';\r\nexport { default as textColor } from '~/text-color';\r\nexport type { TextColorOptions } from '~/text-color';\r\nexport { default as transparentize } from '~/transparentize';\r\nexport * from '~/types';\r\n\r\n// eslint-disable-next-line unicorn/prefer-export-from\r\nexport default Colorizr;\r\n","import { ColorKeysTuple, ColorModelKey } from '~/types';\r\n\r\nexport const COLOR_KEYS: Record<ColorModelKey, ColorKeysTuple> = {\r\n  hsl: ['h', 's', 'l'],\r\n  oklab: ['l', 'a', 'b'],\r\n  oklch: ['l', 'c', 'h'],\r\n  rgb: ['r', 'g', 'b'],\r\n};\r\nexport const COLOR_MODELS: ColorModelKey[] = ['hsl', 'oklab', 'oklch', 'rgb'];\r\nexport const DEG2RAD = Math.PI / 180;\r\nexport const LAB_TO_LMS = {\r\n  l: [0.3963377773761749, 0.2158037573099136],\r\n  m: [-0.1055613458156586, -0.0638541728258133],\r\n  s: [-0.0894841775298119, -1.2914855480194092],\r\n};\r\nexport const LRGB_TO_LMS = {\r\n  l: [0.4122214708, 0.5363325363, 0.0514459929],\r\n  m: [0.2119034982, 0.6806995451, 0.1073969566],\r\n  s: [0.0883024619, 0.2817188376, 0.6299787005],\r\n};\r\nexport const LSM_TO_LAB = {\r\n  l: [0.2104542553, 0.793617785, 0.0040720468],\r\n  a: [1.9779984951, 2.428592205, 0.4505937099],\r\n  b: [0.0259040371, 0.7827717662, 0.808675766],\r\n};\r\nexport const LSM_TO_RGB = {\r\n  r: [4.0767416360759583, -3.3077115392580629, 0.2309699031821043],\r\n  g: [-1.2684379732850315, 2.6097573492876882, -0.341319376002657],\r\n  b: [-0.0041960761386756, -0.7034186179359362, 1.7076146940746117],\r\n};\r\nexport const SRGB_TO_P3 = [\r\n  [0.8224270476, 0.1775729524, 0],\r\n  [0.0331008087, 0.9668991913, 0],\r\n  [0.0170720188, 0.0723477973, 0.9105801839],\r\n];\r\nexport const PRECISION = 5;\r\nexport const RAD2DEG = 180 / Math.PI;\r\n\r\nexport const MESSAGES = {\r\n  alpha: 'amount must be a number between 0 and 1',\r\n  hueRange: 'hue must be a number between 0 and 360',\r\n  input: 'input is required',\r\n  inputHex: 'input is required and must be a hex',\r\n  inputNumber: 'input is required and must be a number',\r\n  inputString: 'input is required and must be a string',\r\n  invalid: 'invalid input',\r\n  invalidCSS: 'invalid CSS string',\r\n  left: 'left is required and must be a string',\r\n  lightnessRange: 'lightness must be a number between 0 and 1',\r\n  options: 'invalid options',\r\n  right: 'right is required and must be a string',\r\n  threshold: 'threshold must be a number between 0 and 255',\r\n} as const;\r\n","export function invariant(condition: boolean, message: string): asserts condition {\r\n  if (condition) {\r\n    return;\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (message === undefined) {\r\n      throw new Error('invariant requires an error message argument');\r\n    }\r\n  }\r\n\r\n  const error = !message\r\n    ? new Error(\r\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.',\r\n      )\r\n    : new Error(message);\r\n\r\n  error.name = 'colorizr';\r\n\r\n  throw error;\r\n}\r\n","/**\r\n * CSS named colors\r\n */\r\n\r\nexport type CSSColor = keyof typeof cssColors;\r\n\r\nexport const cssColors = {\r\n  aliceblue: '#f0f8ff',\r\n  antiquewhite: '#faebd7',\r\n  aqua: '#00ffff',\r\n  aquamarine: '#7fffd4',\r\n  azure: '#f0ffff',\r\n  beige: '#f5f5dc',\r\n  bisque: '#ffe4c4',\r\n  black: '#000000',\r\n  blanchedalmond: '#ffebcd',\r\n  blue: '#0000ff',\r\n  blueviolet: '#8a2be2',\r\n  brown: '#a52a2a',\r\n  burlywood: '#deb887',\r\n  cadetblue: '#5f9ea0',\r\n  chartreuse: '#7fff00',\r\n  chocolate: '#d2691e',\r\n  coral: '#ff7f50',\r\n  cornflowerblue: '#6495ed',\r\n  cornsilk: '#fff8dc',\r\n  crimson: '#dc143c',\r\n  cyan: '#00ffff',\r\n  darkblue: '#00008b',\r\n  darkcyan: '#008b8b',\r\n  darkgoldenrod: '#b8860b',\r\n  darkgray: '#a9a9a9',\r\n  darkgreen: '#006400',\r\n  darkkhaki: '#bdb76b',\r\n  darkmagenta: '#8b008b',\r\n  darkolivegreen: '#556b2f',\r\n  darkorange: '#ff8c00',\r\n  darkorchid: '#9932cc',\r\n  darkred: '#8b0000',\r\n  darksalmon: '#e9967a',\r\n  darkseagreen: '#8fbc8f',\r\n  darkslateblue: '#483d8b',\r\n  darkslategray: '#2f4f4f',\r\n  darkslategrey: '#2f4f4f',\r\n  darkturquoise: '#00ced1',\r\n  darkviolet: '#9400d3',\r\n  deeppink: '#ff1493',\r\n  deepskyblue: '#00bfff',\r\n  dimgray: '#696969',\r\n  dimgrey: '#696969',\r\n  dodgerblue: '#1e90ff',\r\n  firebrick: '#b22222',\r\n  floralwhite: '#fffaf0',\r\n  forestgreen: '#228b22',\r\n  fuchsia: '#ff00ff',\r\n  gainsboro: '#dcdcdc',\r\n  ghostwhite: '#f8f8ff',\r\n  gold: '#ffd700',\r\n  goldenrod: '#daa520',\r\n  gray: '#808080',\r\n  grey: '#808080',\r\n  green: '#008000',\r\n  greenyellow: '#adff2f',\r\n  honeydew: '#f0fff0',\r\n  hotpink: '#ff69b4',\r\n  indianred: '#cd5c5c',\r\n  indigo: '#4b0082',\r\n  ivory: '#fffff0',\r\n  khaki: '#f0e68c',\r\n  lavender: '#e6e6fa',\r\n  lavenderblush: '#fff0f5',\r\n  lawngreen: '#7cfc00',\r\n  lemonchiffon: '#fffacd',\r\n  lightblue: '#add8e6',\r\n  lightcoral: '#f08080',\r\n  lightcyan: '#e0ffff',\r\n  lightgoldenrodyellow: '#fafad2',\r\n  lightgray: '#d3d3d3',\r\n  lightgreen: '#90ee90',\r\n  lightgrey: '#d3d3d3',\r\n  lightpink: '#ffb6c1',\r\n  lightsalmon: '#ffa07a',\r\n  lightseagreen: '#20b2aa',\r\n  lightskyblue: '#87cefa',\r\n  lightslategray: '#778899',\r\n  lightslategrey: '#778899',\r\n  lightsteelblue: '#b0c4de',\r\n  lightyellow: '#ffffe0',\r\n  lime: '#00ff00',\r\n  limegreen: '#32cd32',\r\n  linen: '#faf0e6',\r\n  magenta: '#ff00ff',\r\n  maroon: '#800000',\r\n  mediumaquamarine: '#66cdaa',\r\n  mediumblue: '#0000cd',\r\n  mediumorchid: '#ba55d3',\r\n  mediumpurple: '#9370db',\r\n  mediumseagreen: '#3cb371',\r\n  mediumslateblue: '#7b68ee',\r\n  mediumspringgreen: '#00fa9a',\r\n  mediumturquoise: '#48d1cc',\r\n  mediumvioletred: '#c71585',\r\n  midnightblue: '#191970',\r\n  mintcream: '#f5fffa',\r\n  mistyrose: '#ffe4e1',\r\n  moccasin: '#ffe4b5',\r\n  navajowhite: '#ffdead',\r\n  navy: '#000080',\r\n  oldlace: '#fdf5e6',\r\n  olive: '#808000',\r\n  olivedrab: '#6b8e23',\r\n  orange: '#ffa500',\r\n  orangered: '#ff4500',\r\n  orchid: '#da70d6',\r\n  palegoldenrod: '#eee8aa',\r\n  palegreen: '#98fb98',\r\n  paleturquoise: '#afeeee',\r\n  palevioletred: '#db7093',\r\n  papayawhip: '#ffefd5',\r\n  peachpuff: '#ffdab9',\r\n  peru: '#cd853f',\r\n  pink: '#ffc0cb',\r\n  plum: '#dda0dd',\r\n  powderblue: '#b0e0e6',\r\n  purple: '#800080',\r\n  rebeccapurple: '#663399',\r\n  red: '#ff0000',\r\n  rosybrown: '#bc8f8f',\r\n  royalblue: '#4169e1',\r\n  saddlebrown: '#8b4513',\r\n  salmon: '#fa8072',\r\n  sandybrown: '#f4a460',\r\n  seagreen: '#2e8b57',\r\n  seashell: '#fff5ee',\r\n  sienna: '#a0522d',\r\n  silver: '#c0c0c0',\r\n  skyblue: '#87ceeb',\r\n  slateblue: '#6a5acd',\r\n  slategray: '#708090',\r\n  slategrey: '#708090',\r\n  snow: '#fffafa',\r\n  springgreen: '#00ff7f',\r\n  steelblue: '#4682b4',\r\n  tan: '#d2b48c',\r\n  teal: '#008080',\r\n  thistle: '#d8bfd8',\r\n  tomato: '#ff6347',\r\n  turquoise: '#40e0d0',\r\n  violet: '#ee82ee',\r\n  wheat: '#f5deb3',\r\n  white: '#ffffff',\r\n  whitesmoke: '#f5f5f5',\r\n  yellow: '#ffff00',\r\n  yellowgreen: '#9acd32',\r\n};\r\n","import { COLOR_KEYS } from '~/modules/constants';\r\nimport { CSSColor, cssColors } from '~/modules/css-colors';\r\n\r\nimport { ColorModel, HEX, HSL, LAB, LCH, PlainObject, RGB } from '~/types';\r\n\r\nexport function hasValidMatches(input: unknown): input is string[] {\r\n  return Array.isArray(input) && input.length === 6;\r\n}\r\n\r\nexport function isHex(input: any): input is HEX {\r\n  if (!isString(input)) {\r\n    return false;\r\n  }\r\n\r\n  return /^#([\\da-f]{3,4}|[\\da-f]{6,8})$/i.test(input);\r\n}\r\n\r\n/**\r\n * Check if an object contains HSL values\r\n * The input must be an object with keys 'h', 's', and 'l'\r\n * with values between 0 and 360 for hue or 0 and 100 for the others.\r\n */\r\nexport function isHSL(input: unknown): input is HSL {\r\n  if (!isPlainObject(input)) {\r\n    return false;\r\n  }\r\n\r\n  const entries = Object.entries(input);\r\n\r\n  return (\r\n    !!entries.length &&\r\n    entries.every(([key, value]) => {\r\n      if (key === 'h') {\r\n        return value >= 0 && value <= 360;\r\n      }\r\n\r\n      if (key === 'alpha') {\r\n        return value >= 0 && value <= 1;\r\n      }\r\n\r\n      return COLOR_KEYS.hsl.includes(key) && value >= 0 && value <= 100;\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Check if an object contains LAB values\r\n * The input must be an object with keys 'l', 'a', and 'b' with values between -1 and 1.\r\n */\r\nexport function isLAB(input: unknown): input is LAB {\r\n  if (!isPlainObject(input)) {\r\n    return false;\r\n  }\r\n\r\n  const entries = Object.entries(input);\r\n\r\n  return (\r\n    !!entries.length &&\r\n    entries.every(([key, value]) => {\r\n      if (key === 'l') {\r\n        return value >= 0 && value <= 100;\r\n      }\r\n\r\n      if (key === 'alpha') {\r\n        return value >= 0 && value <= 1;\r\n      }\r\n\r\n      return COLOR_KEYS.oklab.includes(key) && value >= -1 && value <= 1;\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Check if an object contains LAB values\r\n * The input must be an object with keys 'l', 'c', and 'h' with values between 0 and 360.\r\n */\r\nexport function isLCH(input: unknown): input is LCH {\r\n  if (!isPlainObject(input)) {\r\n    return false;\r\n  }\r\n\r\n  const entries = Object.entries(input);\r\n\r\n  return (\r\n    !!entries.length &&\r\n    entries.every(([key, value]) => {\r\n      if (key === 'l') {\r\n        return value >= 0 && value <= 100;\r\n      }\r\n\r\n      if (key === 'alpha') {\r\n        return value >= 0 && value <= 1;\r\n      }\r\n\r\n      return COLOR_KEYS.oklch.includes(key) && value >= 0 && value <= (key === 'h' ? 360 : 1);\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Check if the input is a CSS named color\r\n */\r\nexport function isNamedColor(input: unknown): input is CSSColor {\r\n  return isString(input) && Object.keys(cssColors).includes(input.toLowerCase());\r\n}\r\n\r\n/**\r\n * Check if the input is a number and not NaN\r\n */\r\nexport function isNumber(input: unknown): input is number {\r\n  return typeof input === 'number' && !Number.isNaN(input);\r\n}\r\n\r\n/**\r\n * Check if the input is an object\r\n */\r\nexport function isPlainObject(input: unknown): input is PlainObject {\r\n  if (!input) {\r\n    return false;\r\n  }\r\n\r\n  const { toString } = Object.prototype;\r\n  const prototype = Object.getPrototypeOf(input);\r\n\r\n  return (\r\n    toString.call(input) === '[object Object]' &&\r\n    (prototype === null || prototype === Object.getPrototypeOf({}))\r\n  );\r\n}\r\n\r\n/**\r\n * Check if an object contains RGB values.\r\n * The input must be an object with keys 'r', 'g', and 'b' with values between 0 and 255.\r\n */\r\nexport function isRGB(input: unknown): input is RGB {\r\n  if (!isPlainObject(input)) {\r\n    return false;\r\n  }\r\n\r\n  const entries = Object.entries(input);\r\n\r\n  return (\r\n    !!entries.length &&\r\n    entries.every(([key, value]) => {\r\n      if (key === 'alpha') {\r\n        return value >= 0 && value <= 1;\r\n      }\r\n\r\n      return COLOR_KEYS.rgb.includes(key) && value >= 0 && value <= 255;\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Check if the input is a string\r\n */\r\nexport function isString(input: unknown, validate = true): input is string {\r\n  const isValid = typeof input === 'string';\r\n\r\n  if (validate) {\r\n    return isValid && !!input.trim().length;\r\n  }\r\n\r\n  return isValid;\r\n}\r\n\r\nexport function isValidColorModel<T extends ColorModel>(input: T): input is T {\r\n  return isHSL(input) || isRGB(input) || isLAB(input) || isLCH(input);\r\n}\r\n","import { COLOR_KEYS, COLOR_MODELS, MESSAGES, PRECISION } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport {\r\n  isHSL,\r\n  isLAB,\r\n  isLCH,\r\n  isNumber,\r\n  isPlainObject,\r\n  isRGB,\r\n  isValidColorModel,\r\n} from '~/modules/validators';\r\n\r\nimport {\r\n  Alpha,\r\n  ColorModel,\r\n  ColorModelKey,\r\n  ColorModelKeys,\r\n  ConverterParameters,\r\n  LAB,\r\n  LCH,\r\n  PlainObject,\r\n} from '~/types';\r\n\r\nexport function addAlpha<T extends ColorModel>(input: any, alpha?: Alpha): T {\r\n  invariant(isValidColorModel(input), MESSAGES.invalid);\r\n\r\n  let value = alpha;\r\n\r\n  if (!value) {\r\n    return input;\r\n  }\r\n\r\n  /* c8 ignore next 3 */\r\n  if (value > 1) {\r\n    value /= 100;\r\n  }\r\n\r\n  if (value === 1) {\r\n    return input;\r\n  }\r\n\r\n  return { ...input, alpha: value };\r\n}\r\n\r\n/**\r\n * Clamp a value between a min and max\r\n * @param value\r\n * @param [min=0] - The minimum value\r\n * @param [max=100] - The maximum value\r\n */\r\nexport function clamp(value: number, min = 0, max = 100) {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n\r\n/**\r\n * Constrain the degrees between 0 and 360\r\n */\r\nexport function constrainDegrees(input: number, amount: number): number {\r\n  invariant(isNumber(input), MESSAGES.inputNumber);\r\n\r\n  let value = input + amount;\r\n\r\n  if (value > 360) {\r\n    value %= 360;\r\n  }\r\n\r\n  if (value < 0) {\r\n    value += 360;\r\n  }\r\n\r\n  return Math.abs(value);\r\n}\r\n\r\n/**\r\n * Limit values per type.\r\n */\r\nexport function limit<TModel extends Extract<ColorModelKey, 'hsl' | 'rgb'>>(\r\n  input: number,\r\n  model: TModel,\r\n  key: ColorModelKeys<TModel>,\r\n): number {\r\n  invariant(isNumber(input), 'Input is not a number');\r\n  invariant(COLOR_MODELS.includes(model), `Invalid model${model ? `: ${model}` : ''}`);\r\n  invariant(COLOR_KEYS[model].includes(key), `Invalid key${key ? `: ${key}` : ''}`);\r\n\r\n  switch (model) {\r\n    case 'hsl': {\r\n      invariant(COLOR_KEYS.hsl.includes(key), 'Invalid key');\r\n\r\n      if (['l', 's'].includes(key)) {\r\n        return clamp(input);\r\n      }\r\n\r\n      return clamp(input, 0, 360);\r\n    }\r\n    case 'rgb': {\r\n      invariant(COLOR_KEYS.rgb.includes(key), 'Invalid key');\r\n\r\n      return clamp(input, 0, 255);\r\n    }\r\n    /* c8 ignore next 3 */\r\n    default: {\r\n      throw new Error('Invalid inputs');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Parse the input parameters\r\n */\r\nexport function parseInput<T extends ColorModel>(\r\n  input: ConverterParameters<T>,\r\n  model: ColorModelKey,\r\n): T {\r\n  const keys = COLOR_KEYS[model];\r\n  const validator = {\r\n    hsl: isHSL,\r\n    oklab: isLAB,\r\n    oklch: isLCH,\r\n    rgb: isRGB,\r\n  };\r\n\r\n  invariant(isPlainObject(input) || Array.isArray(input), MESSAGES.invalid);\r\n\r\n  const value = Array.isArray(input)\r\n    ? ({ [keys[0]]: input[0], [keys[1]]: input[1], [keys[2]]: input[2] } as unknown as T)\r\n    : input;\r\n\r\n  invariant(validator[model](value), `invalid ${model} color`);\r\n\r\n  return value;\r\n}\r\n\r\n/**\r\n * Creates an object composed of the picked source properties.\r\n */\r\nexport function pick(input: PlainObject, options: string[]): PlainObject {\r\n  if (!Array.isArray(options)) {\r\n    throw new TypeError('options must be an array');\r\n  }\r\n\r\n  return options\r\n    .filter(d => typeof input[d] !== 'undefined')\r\n    .reduce((acc: PlainObject, d) => {\r\n      acc[d] = input[d];\r\n\r\n      return acc;\r\n    }, {});\r\n}\r\n\r\n/**\r\n * Restrict the values to a certain number of digits.\r\n */\r\nexport function restrictValues<T extends LAB | LCH>(\r\n  input: T,\r\n  precision: number = PRECISION,\r\n  forcePrecision = true,\r\n): T {\r\n  const output = new Map(Object.entries(input));\r\n\r\n  for (const [key, value] of output.entries()) {\r\n    output.set(key, round(value, precision, forcePrecision));\r\n  }\r\n\r\n  return Object.fromEntries(output) as T;\r\n}\r\n\r\n/**\r\n * Round decimal numbers.\r\n */\r\nexport function round(input: number, precision = 2, forcePrecision = true): number {\r\n  if (!isNumber(input) || input === 0) {\r\n    return 0;\r\n  }\r\n\r\n  if (forcePrecision) {\r\n    const factor = 10 ** precision;\r\n\r\n    return Math.round(input * factor) / factor;\r\n  }\r\n\r\n  const absInput = Math.abs(input);\r\n\r\n  let digits = Math.abs(Math.ceil(Math.log(absInput) / Math.LN10));\r\n\r\n  if (digits === 0) {\r\n    digits = 2;\r\n  } else if (digits > precision) {\r\n    digits = precision;\r\n  }\r\n\r\n  let exponent = precision - (digits < 0 ? 0 : digits);\r\n\r\n  if (exponent <= 1 && precision > 1) {\r\n    exponent = 2;\r\n  } else if (exponent > precision || exponent === 0) {\r\n    exponent = precision;\r\n  }\r\n\r\n  const factor = 10 ** exponent;\r\n\r\n  return Math.round(input * factor) / factor;\r\n}\r\n","export { default as hex2hsl } from '~/converters/hex2hsl';\r\nexport { default as hex2oklab } from '~/converters/hex2oklab';\r\nexport { default as hex2oklch } from '~/converters/hex2oklch';\r\nexport { default as hex2rgb } from '~/converters/hex2rgb';\r\n\r\nexport { default as hsl2hex } from '~/converters/hsl2hex';\r\nexport { default as hsl2oklab } from '~/converters/hsl2oklab';\r\nexport { default as hsl2oklch } from '~/converters/hsl2oklch';\r\nexport { default as hsl2rgb } from '~/converters/hsl2rgb';\r\n\r\nexport { default as oklab2hex } from '~/converters/oklab2hex';\r\nexport { default as oklab2hsl } from '~/converters/oklab2hsl';\r\nexport { default as oklab2oklch } from '~/converters/oklab2oklch';\r\nexport { default as oklab2rgb } from '~/converters/oklab2rgb';\r\n\r\nexport { default as oklch2hex } from '~/converters/oklch2hex';\r\nexport { default as oklch2hsl } from '~/converters/oklch2hsl';\r\nexport { default as oklch2oklab } from '~/converters/oklch2oklab';\r\nexport { default as oklch2rgb } from '~/converters/oklch2rgb';\r\n\r\nexport { default as rgb2hex } from '~/converters/rgb2hex';\r\nexport { default as rgb2hsl } from '~/converters/rgb2hsl';\r\nexport { default as rgb2oklab } from '~/converters/rgb2oklab';\r\nexport { default as rgb2oklch } from '~/converters/rgb2oklch';\r\n","import { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex } from '~/modules/validators';\r\n\r\nimport { HEX } from '~/types';\r\n\r\nexport default function formatHex(input: string): HEX {\r\n  invariant(isHex(input), MESSAGES.inputHex);\r\n\r\n  let color = input.replace('#', '');\r\n\r\n  if (color.length === 3 || color.length === 4) {\r\n    const values = [...color];\r\n\r\n    color = '';\r\n\r\n    values.forEach(d => {\r\n      color += `${d}${d}`;\r\n    });\r\n  }\r\n\r\n  const hex = `#${color}`;\r\n\r\n  invariant(isHex(hex), 'invalid hex');\r\n\r\n  return hex;\r\n}\r\n","import formatHex from '~/format-hex';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex } from '~/modules/validators';\r\n\r\nimport { RGB } from '~/types';\r\n\r\n/** Convert HEX to RGB */\r\nexport default function hex2rgb(input: string): RGB {\r\n  invariant(isHex(input), MESSAGES.inputHex);\r\n\r\n  const hex = formatHex(input).slice(1);\r\n\r\n  return {\r\n    r: parseInt(hex.charAt(0) + hex.charAt(1), 16),\r\n    g: parseInt(hex.charAt(2) + hex.charAt(3), 16),\r\n    b: parseInt(hex.charAt(4) + hex.charAt(5), 16),\r\n  };\r\n}\r\n","import { limit, parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HSL, RGB } from '~/types';\r\n\r\n/** Convert RGB to HSL */\r\nexport default function rgb2hsl(input: ConverterParameters<RGB>): HSL {\r\n  const value = parseInput(input, 'rgb');\r\n\r\n  const rLimit = limit(value.r, 'rgb', 'r') / 255;\r\n  const gLimit = limit(value.g, 'rgb', 'g') / 255;\r\n  const bLimit = limit(value.b, 'rgb', 'b') / 255;\r\n\r\n  const min = Math.min(rLimit, gLimit, bLimit);\r\n  const max = Math.max(rLimit, gLimit, bLimit);\r\n  const delta = max - min;\r\n\r\n  let h = 0;\r\n  let s;\r\n  const l = (max + min) / 2;\r\n  let rate;\r\n\r\n  switch (max) {\r\n    case rLimit:\r\n      rate = !delta ? 0 : (gLimit - bLimit) / delta;\r\n      h = 60 * rate;\r\n      break;\r\n    case gLimit:\r\n      rate = (bLimit - rLimit) / delta;\r\n      h = 60 * rate + 120;\r\n      break;\r\n    case bLimit:\r\n      rate = (rLimit - gLimit) / delta;\r\n      h = 60 * rate + 240;\r\n      break;\r\n    /* c8 ignore next 2 */\r\n    default:\r\n      break;\r\n  }\r\n\r\n  if (h < 0) {\r\n    h = 360 + h;\r\n  }\r\n\r\n  if (min === max) {\r\n    s = 0;\r\n  } else {\r\n    s = l < 0.5 ? delta / (2 * l) : delta / (2 - 2 * l);\r\n  }\r\n\r\n  return {\r\n    h: Math.abs(+(h % 360).toFixed(2)),\r\n    s: +(s * 100).toFixed(2),\r\n    l: +(l * 100).toFixed(2),\r\n  };\r\n}\r\n","import hex2rgb from '~/converters/hex2rgb';\r\nimport rgb2hsl from '~/converters/rgb2hsl';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex } from '~/modules/validators';\r\n\r\nimport { HSL } from '~/types';\r\n\r\n/** Convert HEX to HSL */\r\nexport default function hex2hsl(input: string): HSL {\r\n  invariant(isHex(input), MESSAGES.inputHex);\r\n\r\n  return rgb2hsl(hex2rgb(input));\r\n}\r\n","import { LRGB_TO_LMS, LSM_TO_LAB, PRECISION } from '~/modules/constants';\r\nimport { parseInput, restrictValues } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, LAB, RGB } from '~/types';\r\n\r\nconst { cbrt, sign } = Math;\r\n\r\nfunction rgb2lrgb(input: number) {\r\n  const abs = Math.abs(input);\r\n\r\n  if (abs < 0.04045) {\r\n    return input / 12.92;\r\n  }\r\n\r\n  return (sign(input) || 1) * ((abs + 0.055) / 1.055) ** 2.4;\r\n}\r\n\r\n/** Convert RGB to oklab */\r\nexport default function rgb2oklab(input: ConverterParameters<RGB>, precision = PRECISION): LAB {\r\n  const value = parseInput(input, 'rgb');\r\n\r\n  const [lr, lg, lb] = [rgb2lrgb(value.r / 255), rgb2lrgb(value.g / 255), rgb2lrgb(value.b / 255)];\r\n  const l = cbrt(LRGB_TO_LMS.l[0] * lr + LRGB_TO_LMS.l[1] * lg + LRGB_TO_LMS.l[2] * lb);\r\n  const m = cbrt(LRGB_TO_LMS.m[0] * lr + LRGB_TO_LMS.m[1] * lg + LRGB_TO_LMS.m[2] * lb);\r\n  const s = cbrt(LRGB_TO_LMS.s[0] * lr + LRGB_TO_LMS.s[1] * lg + LRGB_TO_LMS.s[2] * lb);\r\n\r\n  const lab = {\r\n    l: LSM_TO_LAB.l[0] * l + LSM_TO_LAB.l[1] * m - LSM_TO_LAB.l[2] * s,\r\n    a: LSM_TO_LAB.a[0] * l - LSM_TO_LAB.a[1] * m + LSM_TO_LAB.a[2] * s,\r\n    b: LSM_TO_LAB.b[0] * l + LSM_TO_LAB.b[1] * m - LSM_TO_LAB.b[2] * s,\r\n  };\r\n\r\n  return restrictValues(lab, precision);\r\n}\r\n","import hex2rgb from '~/converters/hex2rgb';\r\nimport rgb2oklab from '~/converters/rgb2oklab';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex } from '~/modules/validators';\r\n\r\nimport { LAB } from '~/types';\r\n\r\n/** Convert HEX to oklab */\r\nexport default function hex2oklab(input: string, precision?: number): LAB {\r\n  invariant(isHex(input), MESSAGES.inputHex);\r\n\r\n  return rgb2oklab(hex2rgb(input), precision);\r\n}\r\n","import { RAD2DEG } from '~/modules/constants';\r\nimport { parseInput, restrictValues, round } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, LAB, LCH } from '~/types';\r\n\r\nconst { atan2, sqrt } = Math;\r\n\r\n/** Convert oklab to oklch */\r\nexport default function oklab2oklch(input: ConverterParameters<LAB>, precision?: number): LCH {\r\n  const { l, a, b } = restrictValues(parseInput(input, 'oklab'));\r\n\r\n  const c = sqrt(a ** 2 + b ** 2);\r\n  let h = (atan2(b, a) * RAD2DEG + 360) % 360;\r\n\r\n  if (round(c * 10000) === 0) {\r\n    h = 0;\r\n  }\r\n\r\n  return restrictValues({ l, c, h }, precision);\r\n}\r\n","import oklab2oklch from '~/converters/oklab2oklch';\r\nimport rgb2oklab from '~/converters/rgb2oklab';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, LCH, RGB } from '~/types';\r\n\r\n/** Convert RGB to oklch */\r\nexport default function rgb2oklch(input: ConverterParameters<RGB>, precision?: number): LCH {\r\n  const value = parseInput(input, 'rgb');\r\n\r\n  return oklab2oklch(rgb2oklab(value, precision), precision);\r\n}\r\n","import hex2rgb from '~/converters/hex2rgb';\r\nimport rgb2oklch from '~/converters/rgb2oklch';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex } from '~/modules/validators';\r\n\r\nimport { LCH } from '~/types';\r\n\r\n/** Convert HEX to oklch */\r\nexport default function hex2oklch(input: string, precision?: number): LCH {\r\n  invariant(isHex(input), MESSAGES.inputHex);\r\n\r\n  return rgb2oklch(hex2rgb(input), precision);\r\n}\r\n","import { invariant } from '~/modules/invariant';\r\nimport { round } from '~/modules/utils';\r\nimport { isNumber } from '~/modules/validators';\r\n\r\n/**\r\n * Convert hue to RGB using chroma and median point\r\n */\r\nexport default function hue2rgb(point: number, chroma: number, h: number): number {\r\n  invariant(isNumber(point) && isNumber(chroma) && isNumber(h), 'point, chroma and h are required');\r\n  let hue = h;\r\n\r\n  if (hue < 0) {\r\n    hue += 1;\r\n  }\r\n\r\n  if (hue > 1) {\r\n    hue -= 1;\r\n  }\r\n\r\n  if (hue < 1 / 6) {\r\n    return round(point + (chroma - point) * 6 * hue, 4);\r\n  }\r\n\r\n  if (hue < 1 / 2) {\r\n    return round(chroma, 4);\r\n  }\r\n\r\n  if (hue < 2 / 3) {\r\n    return round(point + (chroma - point) * (2 / 3 - hue) * 6, 4);\r\n  }\r\n\r\n  return round(point, 4);\r\n}\r\n","import hue2rgb from '~/modules/hue2rgb';\r\nimport { parseInput, round } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HSL, RGB } from '~/types';\r\n\r\n/** Convert HSL to RGB */\r\nexport default function hsl2rgb(input: ConverterParameters<HSL>): RGB {\r\n  const value = parseInput(input, 'hsl');\r\n\r\n  const h = round(value.h) / 360;\r\n  const s = round(value.s) / 100;\r\n  const l = round(value.l) / 100;\r\n\r\n  let r;\r\n  let g;\r\n  let b;\r\n\r\n  let point;\r\n  let chroma;\r\n\r\n  if (s === 0) {\r\n    r = l;\r\n    g = l;\r\n    b = l;\r\n  } else {\r\n    chroma = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    point = 2 * l - chroma;\r\n\r\n    r = hue2rgb(point, chroma, h + 1 / 3);\r\n    g = hue2rgb(point, chroma, h);\r\n    b = hue2rgb(point, chroma, h - 1 / 3);\r\n  }\r\n\r\n  return {\r\n    r: Math.round(r * 255),\r\n    g: Math.round(g * 255),\r\n    b: Math.round(b * 255),\r\n  };\r\n}\r\n","import { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HEX, RGB } from '~/types';\r\n\r\n/** Convert RGB to HEX */\r\nexport default function rgb2hex(input: ConverterParameters<RGB>): HEX {\r\n  const rgb = parseInput(input, 'rgb');\r\n\r\n  return `#${Object.values(rgb)\r\n    .map(d => `0${Math.floor(d).toString(16)}`.slice(-2))\r\n    .join('')}`;\r\n}\r\n","import hsl2rgb from '~/converters/hsl2rgb';\r\nimport rgb2hex from '~/converters/rgb2hex';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HEX, HSL } from '~/types';\r\n\r\n/** Convert HSL to HEX */\r\nexport default function hsl2hex(input: ConverterParameters<HSL>): HEX {\r\n  const value = parseInput(input, 'hsl');\r\n\r\n  return rgb2hex(hsl2rgb(value));\r\n}\r\n","import hsl2rgb from '~/converters/hsl2rgb';\r\nimport rgb2oklab from '~/converters/rgb2oklab';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HSL, LAB } from '~/types';\r\n\r\n/** Convert HSL to oklab */\r\nexport default function hsl2oklab(input: ConverterParameters<HSL>, precision?: number): LAB {\r\n  const value = parseInput(input, 'hsl');\r\n\r\n  return rgb2oklab(hsl2rgb(value), precision);\r\n}\r\n","import hsl2rgb from '~/converters/hsl2rgb';\r\nimport rgb2oklch from '~/converters/rgb2oklch';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HSL, LCH } from '~/types';\r\n\r\n/** Convert HSL to oklch */\r\nexport default function hsl2oklch(input: ConverterParameters<HSL>, precision?: number): LCH {\r\n  const value = parseInput(input, 'hsl');\r\n\r\n  return rgb2oklch(hsl2rgb(value), precision);\r\n}\r\n","import { LAB_TO_LMS, LSM_TO_RGB } from '~/modules/constants';\r\nimport { clamp, parseInput, round } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, LAB, RGB } from '~/types';\r\n\r\nconst { abs } = Math;\r\n\r\nfunction lrgb2rgb(input: number) {\r\n  const absoluteNumber = abs(input);\r\n  const sign = input < 0 ? -1 : 1;\r\n\r\n  if (absoluteNumber > 0.0031308) {\r\n    return sign * (absoluteNumber ** (1 / 2.4) * 1.055 - 0.055);\r\n  }\r\n\r\n  return input * 12.92;\r\n}\r\n\r\n/** Convert oklab to RGB */\r\nexport default function oklab2rgb(input: ConverterParameters<LAB>, precision = 0): RGB {\r\n  const { l: L, a: A, b: B } = parseInput(input, 'oklab');\r\n\r\n  const l = (L + LAB_TO_LMS.l[0] * A + LAB_TO_LMS.l[1] * B) ** 3;\r\n  const m = (L + LAB_TO_LMS.m[0] * A + LAB_TO_LMS.m[1] * B) ** 3;\r\n  const s = (L + LAB_TO_LMS.s[0] * A + LAB_TO_LMS.s[1] * B) ** 3;\r\n\r\n  const r = 255 * lrgb2rgb(LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s);\r\n  const g = 255 * lrgb2rgb(LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s);\r\n  const b = 255 * lrgb2rgb(LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s);\r\n\r\n  return {\r\n    r: clamp(round(r, precision), 0, 255),\r\n    g: clamp(round(g, precision), 0, 255),\r\n    b: clamp(round(b, precision), 0, 255),\r\n  };\r\n}\r\n","import oklab2rgb from '~/converters/oklab2rgb';\r\nimport rgb2hex from '~/converters/rgb2hex';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HEX, LAB } from '~/types';\r\n\r\n/** Convert oklab to HEX */\r\nexport default function oklab2hex(input: ConverterParameters<LAB>): HEX {\r\n  const value = parseInput(input, 'oklab');\r\n\r\n  return rgb2hex(oklab2rgb(value));\r\n}\r\n","import oklab2rgb from '~/converters/oklab2rgb';\r\nimport rgb2hsl from '~/converters/rgb2hsl';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HSL, LAB } from '~/types';\r\n\r\n/** Convert oklab to HSL */\r\nexport default function oklab2hsl(input: ConverterParameters<LAB>): HSL {\r\n  const value = parseInput(input, 'oklab');\r\n\r\n  return rgb2hsl(oklab2rgb(value));\r\n}\r\n","/* eslint-disable prefer-const */\r\nimport { DEG2RAD } from '~/modules/constants';\r\nimport { parseInput, restrictValues } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, LAB, LCH } from '~/types';\r\n\r\nconst { sin, cos } = Math;\r\n\r\n/** Convert oklch to oklab */\r\nexport default function oklch2oklab(input: ConverterParameters<LCH>, precision?: number): LAB {\r\n  /*\r\n  Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\r\n  These formulas were invented by David Dalrymple to obtain maximum contrast without going\r\n  out of gamut if the parameters are in the range 0-1.\r\n\r\n  A saturation multiplier was added by Gregor Aisch\r\n  */\r\n  let { l, c, h } = parseInput(input, 'oklch');\r\n\r\n  /* c8 ignore next 3 */\r\n  if (Number.isNaN(h) || h < 0) {\r\n    h = 0;\r\n  }\r\n\r\n  return restrictValues({ l, a: c * cos(h * DEG2RAD), b: c * sin(h * DEG2RAD) }, precision);\r\n}\r\n","import oklab2rgb from '~/converters/oklab2rgb';\r\nimport oklch2oklab from '~/converters/oklch2oklab';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, LCH, RGB } from '~/types';\r\n\r\n/** Convert oklch to RGB */\r\nexport default function oklch2rgb(input: ConverterParameters<LCH>, precision = 0): RGB {\r\n  const value = parseInput(input, 'oklch');\r\n\r\n  return oklab2rgb(oklch2oklab(value), precision);\r\n}\r\n","import oklch2rgb from '~/converters/oklch2rgb';\r\nimport rgb2hex from '~/converters/rgb2hex';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HEX, LCH } from '~/types';\r\n\r\n/** Convert oklch to HEX */\r\nexport default function oklch2hex(input: ConverterParameters<LCH>): HEX {\r\n  const value = parseInput(input, 'oklch');\r\n\r\n  return rgb2hex(oklch2rgb(value));\r\n}\r\n","import oklch2rgb from '~/converters/oklch2rgb';\r\nimport rgb2hsl from '~/converters/rgb2hsl';\r\nimport { parseInput } from '~/modules/utils';\r\n\r\nimport { ConverterParameters, HSL, LCH } from '~/types';\r\n\r\n/** Convert oklch to HSL */\r\nexport default function oklch2hsl(input: ConverterParameters<LCH>): HSL {\r\n  const value = parseInput(input, 'oklch');\r\n\r\n  return rgb2hsl(oklch2rgb(value));\r\n}\r\n","import { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { round } from '~/modules/utils';\r\nimport { isHex, isNumber } from '~/modules/validators';\r\n\r\nimport { Alpha } from '~/types';\r\n\r\n/**\r\n * Add an alpha value to a hex string\r\n */\r\nexport function addAlphaToHex(input: string, alpha: Alpha): string {\r\n  invariant(isHex(input), MESSAGES.inputHex);\r\n  invariant(isNumber(alpha), MESSAGES.inputNumber);\r\n\r\n  if (alpha >= 1) {\r\n    return removeAlphaFromHex(input);\r\n  }\r\n\r\n  return `${removeAlphaFromHex(input)}${convertAlphaToHex(alpha)}`;\r\n}\r\n\r\n/**\r\n * Convert an alpha value to a hex value.\r\n */\r\nexport function convertAlphaToHex(input: Alpha): string {\r\n  invariant(isNumber(input), MESSAGES.inputNumber);\r\n\r\n  let alpha = input;\r\n\r\n  if (input > 1) {\r\n    alpha /= 100;\r\n  }\r\n\r\n  return Math.round(alpha * 255)\r\n    .toString(16)\r\n    .padStart(2, '0');\r\n}\r\n\r\n/**\r\n * Extract the alpha value from a hex string\r\n */\r\nexport function extractAlphaFromHex(input: string): number {\r\n  invariant(isHex(input), MESSAGES.inputString);\r\n\r\n  const alpha = input.substring(7, 9);\r\n\r\n  if (!alpha) {\r\n    return 1;\r\n  }\r\n\r\n  return round(parseInt(alpha, 16) / 255);\r\n}\r\n\r\nexport function hexadecimalToNumber(input: string) {\r\n  return round(parseInt(input, 16));\r\n}\r\n\r\n/**\r\n * Remove the alpha value from a hex string\r\n */\r\nexport function removeAlphaFromHex(input: string) {\r\n  invariant(isHex(input), MESSAGES.inputHex);\r\n\r\n  if (input.length === 5) {\r\n    return input.substring(0, 4);\r\n  }\r\n\r\n  return input.substring(0, 7);\r\n}\r\n","import hex2rgb from '~/converters/hex2rgb';\r\nimport { COLOR_KEYS, MESSAGES } from '~/modules/constants';\r\nimport { extractAlphaFromHex } from '~/modules/hex-utils';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { hasValidMatches, isHex, isString } from '~/modules/validators';\r\n\r\nimport { ColorModelKey, PlainObject } from '~/types';\r\n\r\nexport type ExtractColorPartsReturn = {\r\n  alpha?: number;\r\n  model: ColorModelKey;\r\n} & PlainObject<number>;\r\n\r\n/**\r\n * Extract the color parts from a CSS color string.\r\n * Hex colors are not supported.\r\n */\r\nexport default function extractColorParts(input: string) {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n\r\n  if (isHex(input)) {\r\n    const keys = COLOR_KEYS.rgb;\r\n    const { r, g, b } = hex2rgb(input);\r\n    const alpha = extractAlphaFromHex(input);\r\n\r\n    return {\r\n      model: 'rgb' as ColorModelKey,\r\n      [keys[0]]: r,\r\n      [keys[1]]: g,\r\n      [keys[2]]: b,\r\n      alpha: alpha < 1 ? alpha : undefined,\r\n    } as ExtractColorPartsReturn;\r\n  }\r\n\r\n  const colorRegex =\r\n    /(?:(rgb|hsl|oklab|oklch)a?\\s*\\(\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)\\s*[ ,/]\\s*([\\d%.-]+)(?:\\s*[ ,/]\\s*([\\d%.-]+))?\\s*\\))/i;\r\n\r\n  const matches = colorRegex.exec(input);\r\n\r\n  invariant(hasValidMatches(matches), MESSAGES.invalidCSS);\r\n\r\n  const model = matches[1] as ColorModelKey;\r\n  const keys = COLOR_KEYS[model];\r\n  let alpha = matches[5] ? parseFloat(matches[5]) : 1;\r\n\r\n  if (alpha > 1) {\r\n    alpha /= 100;\r\n  }\r\n\r\n  return {\r\n    model,\r\n    [keys[0]]: parseFloat(matches[2]),\r\n    [keys[1]]: parseFloat(matches[3]),\r\n    [keys[2]]: parseFloat(matches[4]),\r\n    alpha: alpha < 1 ? alpha : undefined,\r\n  } as ExtractColorPartsReturn;\r\n}\r\n","import * as converters from '~/converters';\r\nimport extractColorParts from '~/extract-color-parts';\r\nimport { MESSAGES, PRECISION } from '~/modules/constants';\r\nimport { CSSColor, cssColors } from '~/modules/css-colors';\r\nimport { convertAlphaToHex, extractAlphaFromHex, removeAlphaFromHex } from '~/modules/hex-utils';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { addAlpha, round } from '~/modules/utils';\r\nimport { isHex, isNamedColor, isString } from '~/modules/validators';\r\n\r\nimport { ColorReturn, ColorTuple, ColorType } from '~/types';\r\n\r\n/**\r\n * Parse CSS color\r\n */\r\nexport default function parseCSS<T extends ColorType>(input: string, format?: T): ColorReturn<T> {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n\r\n  let result: any;\r\n\r\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase() as CSSColor] : input;\r\n\r\n  const output = format ?? (isHex(value) ? 'hex' : extractColorParts(value).model);\r\n\r\n  const colorParams = (params: Record<string, number>) => Object.values(params) as ColorTuple;\r\n\r\n  if (isHex(value)) {\r\n    const alpha = extractAlphaFromHex(value);\r\n\r\n    switch (output) {\r\n      case 'hsl': {\r\n        result = addAlpha(converters.hex2hsl(value), alpha);\r\n        break;\r\n      }\r\n      case 'oklab': {\r\n        result = addAlpha(converters.hex2oklab(value), alpha);\r\n        break;\r\n      }\r\n      case 'oklch': {\r\n        result = addAlpha(converters.hex2oklch(value), alpha);\r\n        break;\r\n      }\r\n      case 'rgb': {\r\n        result = addAlpha(converters.hex2rgb(value), alpha);\r\n        break;\r\n      }\r\n      default: {\r\n        result = `${removeAlphaFromHex(value)}${alpha !== 1 ? convertAlphaToHex(alpha) : ''}`;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return result as ColorReturn<T>;\r\n  }\r\n\r\n  switch (output) {\r\n    case 'hsl': {\r\n      const { alpha, model, ...color } = extractColorParts(value);\r\n\r\n      if (['oklab', 'oklch'].includes(model) && color.l > 1) {\r\n        color.l = round(color.l / 100, PRECISION);\r\n      }\r\n\r\n      result = addAlpha(\r\n        model === 'hsl' ? color : converters[`${model}2hsl`](colorParams(color)),\r\n        alpha,\r\n      );\r\n\r\n      break;\r\n    }\r\n    case 'oklab': {\r\n      const { alpha, model, ...color } = extractColorParts(value);\r\n\r\n      if (['oklab', 'oklch'].includes(model) && color.l > 1) {\r\n        color.l = round(color.l / 100, PRECISION);\r\n      }\r\n\r\n      result = addAlpha(\r\n        model === 'oklab' ? color : converters[`${model}2oklab`](colorParams(color)),\r\n        alpha,\r\n      );\r\n\r\n      break;\r\n    }\r\n    case 'oklch': {\r\n      const { alpha, model, ...color } = extractColorParts(value);\r\n\r\n      if (['oklab', 'oklch'].includes(model) && color.l > 1) {\r\n        color.l = round(color.l / 100, PRECISION);\r\n      }\r\n\r\n      result = addAlpha(\r\n        model === 'oklch' ? color : converters[`${model}2oklch`](colorParams(color)),\r\n        alpha,\r\n      );\r\n      break;\r\n    }\r\n    case 'rgb': {\r\n      const { alpha, model, ...color } = extractColorParts(value);\r\n\r\n      if (['oklab', 'oklch'].includes(model) && color.l > 1) {\r\n        color.l /= 100;\r\n      }\r\n\r\n      result = addAlpha(\r\n        model === 'rgb' ? color : converters[`${model}2rgb`](colorParams(color)),\r\n        alpha,\r\n      );\r\n      break;\r\n    }\r\n\r\n    case 'hex':\r\n    default: {\r\n      const { alpha, model, ...color } = extractColorParts(value);\r\n      let alphaPrefix = '';\r\n\r\n      if (['oklab', 'oklch'].includes(model) && color.l > 1) {\r\n        color.l = round(color.l / 100, PRECISION);\r\n      }\r\n\r\n      if (alpha) {\r\n        alphaPrefix = convertAlphaToHex(alpha);\r\n      }\r\n\r\n      result = `${converters[`${model}2hex`](colorParams(color))}${alphaPrefix}`;\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  return result as ColorReturn<T>;\r\n}\r\n","import { MESSAGES, PRECISION } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { round } from '~/modules/utils';\r\nimport { isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\n/**\r\n * Get the brightness difference between 2 colors.\r\n */\r\nexport default function brightnessDifference(\r\n  left: string,\r\n  right: string,\r\n  precision = PRECISION,\r\n): number {\r\n  invariant(isString(left), MESSAGES.left);\r\n  invariant(isString(right), MESSAGES.right);\r\n\r\n  const RGBLeft = parseCSS(left, 'rgb');\r\n  const RGBRight = parseCSS(right, 'rgb');\r\n\r\n  const brightnessLeft = (RGBLeft.r * 299 + RGBLeft.g * 587 + RGBLeft.b * 114) / 1000;\r\n  const brightnessRight = (RGBRight.r * 299 + RGBRight.g * 587 + RGBRight.b * 114) / 1000;\r\n\r\n  return round(Math.abs(brightnessRight - brightnessLeft), precision);\r\n}\r\n","import { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { round } from '~/modules/utils';\r\nimport { isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\n/**\r\n * Get the chroma of a color.\r\n */\r\nexport default function chroma(input: string): number {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n\r\n  const { r, g, b } = parseCSS(input, 'rgb');\r\n\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n\r\n  return round((max - min) / 255, 4);\r\n}\r\n","import { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\n/**\r\n * Get the difference between 2 colors.\r\n */\r\nexport default function colorDifference(left: string, right: string): number {\r\n  invariant(isString(left), MESSAGES.left);\r\n  invariant(isString(right), MESSAGES.right);\r\n\r\n  const RGBLeft = parseCSS(left, 'rgb');\r\n  const RGBRight = parseCSS(right, 'rgb');\r\n\r\n  return (\r\n    Math.max(RGBLeft.r, RGBRight.r) -\r\n    Math.min(RGBLeft.r, RGBRight.r) +\r\n    (Math.max(RGBLeft.g, RGBRight.g) - Math.min(RGBLeft.g, RGBRight.g)) +\r\n    (Math.max(RGBLeft.b, RGBRight.b) - Math.min(RGBLeft.b, RGBRight.b))\r\n  );\r\n}\r\n","import { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { round } from '~/modules/utils';\r\nimport { isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\n/**\r\n * Get the luminance of a color.\r\n */\r\nexport default function luminance(input: string): number {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n\r\n  const { r, g, b } = parseCSS(input, 'rgb');\r\n\r\n  const rgb = [r / 255, g / 255, b / 255];\r\n\r\n  for (let index = 0; index < rgb.length; index++) {\r\n    if (rgb[index] <= 0.03928) {\r\n      rgb[index] /= 12.92;\r\n    } else {\r\n      rgb[index] = ((rgb[index] + 0.055) / 1.055) ** 2.4;\r\n    }\r\n  }\r\n\r\n  return round(0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2], 4);\r\n}\r\n","import getLuminance from '~/luminance';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { round } from '~/modules/utils';\r\nimport { isString } from '~/modules/validators';\r\n\r\n/**\r\n * Get the color contrast between 2 colors.\r\n */\r\nexport default function contrast(left: string, right: string): number {\r\n  invariant(isString(left), MESSAGES.left);\r\n  invariant(isString(right), MESSAGES.right);\r\n\r\n  const LuminanceLeft = getLuminance(left);\r\n  const LuminanceRight = getLuminance(right);\r\n\r\n  return round(\r\n    LuminanceLeft >= LuminanceRight\r\n      ? (LuminanceLeft + 0.05) / (LuminanceRight + 0.05)\r\n      : (LuminanceRight + 0.05) / (LuminanceLeft + 0.05),\r\n  );\r\n}\r\n","import getBrightnessDifference from '~/brightness-difference';\r\nimport getColorDifference from '~/color-difference';\r\nimport getContrast from '~/contrast';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isString } from '~/modules/validators';\r\n\r\nimport { Analysis } from '~/types';\r\n\r\n/**\r\n * Check 2 colors for WCAG compliance.\r\n */\r\nexport default function compare(left: string, right: string): Analysis {\r\n  invariant(isString(left), MESSAGES.left);\r\n  invariant(isString(right), MESSAGES.right);\r\n\r\n  const colorThreshold = 500;\r\n  const brightnessThreshold = 125;\r\n\r\n  const colorDifference = getColorDifference(left, right);\r\n  const contrast = getContrast(left, right);\r\n  const brightnessDifference = getBrightnessDifference(left, right);\r\n\r\n  const isBright = brightnessDifference >= brightnessThreshold;\r\n  const hasEnoughDifference = colorDifference >= colorThreshold;\r\n\r\n  let compliant = 0;\r\n\r\n  if (isBright && hasEnoughDifference) {\r\n    compliant = 2;\r\n  } else if (isBright || hasEnoughDifference) {\r\n    compliant = 1;\r\n  }\r\n\r\n  return {\r\n    brightnessDifference,\r\n    colorDifference,\r\n    compliant,\r\n    contrast,\r\n    largeAA: contrast >= 3,\r\n    largeAAA: contrast >= 4.5,\r\n    normalAA: contrast >= 4.5,\r\n    normalAAA: contrast >= 7,\r\n  };\r\n}\r\n","import * as converters from '~/converters';\r\nimport extractColorParts from '~/extract-color-parts';\r\nimport { MESSAGES, PRECISION } from '~/modules/constants';\r\nimport { CSSColor, cssColors } from '~/modules/css-colors';\r\nimport { convertAlphaToHex, removeAlphaFromHex } from '~/modules/hex-utils';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { restrictValues, round } from '~/modules/utils';\r\nimport {\r\n  isHex,\r\n  isHSL,\r\n  isLAB,\r\n  isLCH,\r\n  isNamedColor,\r\n  isRGB,\r\n  isString,\r\n  isValidColorModel,\r\n} from '~/modules/validators';\r\n\r\nimport { Alpha, ColorModel, ColorReturn, ColorType, HEX } from '~/types';\r\n\r\nexport interface FormatCSSOptions {\r\n  /**\r\n   * The alpha value of the color.\r\n   */\r\n  alpha?: Alpha;\r\n  /**\r\n   * Output color format.\r\n   * @default 'hex'\r\n   */\r\n  format?: ColorType;\r\n  /**\r\n   * The number of digits of the output.\r\n   * @default 5\r\n   */\r\n  precision?: number;\r\n  /**\r\n   * The separator between the values.\r\n   *\r\n   * oklab and oklch always use space as a separator.\r\n   * @default ' '\r\n   */\r\n  separator?: string;\r\n}\r\n\r\nfunction getColorModel<T extends ColorModel | string>(input: T): ColorType {\r\n  if (isHex(input) || isNamedColor(input)) {\r\n    return 'hex';\r\n  }\r\n\r\n  if (isString(input)) {\r\n    return extractColorParts(input).model;\r\n  } else if (isHSL(input)) {\r\n    return 'hsl';\r\n  } else if (isLAB(input)) {\r\n    return 'oklab';\r\n  } else if (isLCH(input)) {\r\n    return 'oklch';\r\n  } else if (isRGB(input)) {\r\n    return 'rgb';\r\n  }\r\n\r\n  throw new Error(MESSAGES.invalid);\r\n}\r\n\r\nfunction getColorValue<TInput extends ColorModel | string, TOutput extends ColorType>(\r\n  input: TInput,\r\n  output: TOutput,\r\n): ColorReturn<TOutput> {\r\n  const value = isNamedColor(input) ? cssColors[input.toLowerCase() as CSSColor] : input;\r\n\r\n  const from = getColorModel(value);\r\n\r\n  if (from === output) {\r\n    return value as ColorReturn<TOutput>;\r\n  }\r\n\r\n  const converterKey = `${from}2${output}` as keyof typeof converters; // Retrieve the converter function dynamically\r\n  const converter = (converters as Record<string, (x: any) => any>)[converterKey];\r\n\r\n  if (!converter) {\r\n    throw new Error(`Converter not found for ${from} to ${output}`);\r\n  }\r\n\r\n  switch (from) {\r\n    case 'hex': {\r\n      if (output === 'hex') {\r\n        return value as ColorReturn<TOutput>;\r\n      }\r\n\r\n      return converter(value);\r\n    }\r\n    case 'hsl': {\r\n      if (output === 'hsl') {\r\n        return value as ColorReturn<TOutput>;\r\n      }\r\n\r\n      return converter(value);\r\n    }\r\n    case 'oklab': {\r\n      if (output === 'oklab') {\r\n        return value as ColorReturn<TOutput>;\r\n      }\r\n\r\n      return converter(value);\r\n    }\r\n    case 'oklch': {\r\n      if (output === 'oklch') {\r\n        return value as ColorReturn<TOutput>;\r\n      }\r\n\r\n      return converter(value);\r\n    }\r\n    default: {\r\n      if (output === 'rgb') {\r\n        return value as ColorReturn<TOutput>;\r\n      }\r\n\r\n      return converter(value);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function formatCSS<T extends ColorModel | HEX>(\r\n  input: T,\r\n  options: FormatCSSOptions = {},\r\n): string {\r\n  invariant(isHex(input) || isValidColorModel(input), MESSAGES.invalid);\r\n\r\n  const { alpha, format = 'hex', precision = PRECISION, separator: baseSeparator = ' ' } = options;\r\n\r\n  const opacity = alpha && alpha !== 1 ? `${round(alpha * 100)}%` : null;\r\n  let params = [];\r\n  let separator = baseSeparator;\r\n\r\n  switch (format) {\r\n    case 'hsl': {\r\n      const { h, s, l } = getColorValue(input, 'hsl');\r\n\r\n      params = [h, `${s}%`, `${l}%`];\r\n      break;\r\n    }\r\n    case 'oklab': {\r\n      separator = ' ';\r\n      const { l, a, b } = restrictValues(getColorValue(input, 'oklab'), precision);\r\n\r\n      params = [`${round(l * 100, precision)}%`, a, b];\r\n      break;\r\n    }\r\n    case 'oklch': {\r\n      separator = ' ';\r\n      const { l, c, h } = restrictValues(getColorValue(input, 'oklch'), precision);\r\n\r\n      params = [`${round(l * 100, precision)}%`, c, h];\r\n      break;\r\n    }\r\n    case 'rgb': {\r\n      const { r, g, b } = getColorValue(input, 'rgb');\r\n\r\n      params = [r, g, b];\r\n      break;\r\n    }\r\n    default: {\r\n      const hex = removeAlphaFromHex(getColorValue(input, 'hex'));\r\n\r\n      if (alpha && alpha !== 1) {\r\n        return `${hex}${convertAlphaToHex(alpha)}`;\r\n      }\r\n\r\n      return hex;\r\n    }\r\n  }\r\n\r\n  return `${format}(${params.join(separator)}${opacity ? ` / ${opacity}` : ''})`;\r\n}\r\n","import extractColorParts from '~/extract-color-parts';\r\nimport formatCSS from '~/format-css';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { clamp } from '~/modules/utils';\r\nimport { isHex, isNamedColor, isNumber, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { ColorModelKeys, ColorType } from '~/types';\r\n\r\n/**\r\n * Update color properties\r\n */\r\nexport default function updater(\r\n  key: ColorModelKeys<'hsl'>,\r\n  operator: '+' | '-',\r\n  format?: ColorType,\r\n) {\r\n  return (input: string, amount: number) => {\r\n    invariant(isString(input), MESSAGES.inputString);\r\n    invariant(isNumber(amount), MESSAGES.alpha);\r\n\r\n    const color = parseCSS(input, 'hsl');\r\n    const output = isHex(input) || isNamedColor(input) ? 'hex' : extractColorParts(input).model;\r\n\r\n    return formatCSS(\r\n      {\r\n        ...color,\r\n        [key]: clamp(color[key] + (operator === '+' ? amount : -amount), 0, 100),\r\n      },\r\n      { format: format ?? output },\r\n    );\r\n  };\r\n}\r\n","import updater from '~/modules/updater';\r\n\r\nimport { Amount, ColorType } from '~/types';\r\n\r\n/**\r\n * Decrease color lightness\r\n */\r\nexport default function darken(input: string, amount: Amount, format?: ColorType): string {\r\n  return updater('l', '-', format)(input, amount);\r\n}\r\n","import updater from '~/modules/updater';\r\n\r\nimport { Amount, ColorType } from '~/types';\r\n\r\n/**\r\n * Decrease color saturation\r\n */\r\nexport default function desaturate(input: string, amount: Amount, format?: ColorType) {\r\n  return updater('s', '-', format)(input, amount);\r\n}\r\n","import extractColorParts from '~/extract-color-parts';\r\nimport formatCSS from '~/format-css';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { constrainDegrees } from '~/modules/utils';\r\nimport { isHex, isNamedColor, isNumber, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { ColorType, Degrees } from '~/types';\r\n\r\n/**\r\n * Change the color hue\r\n */\r\nexport default function rotate(input: string, degrees: Degrees, format?: ColorType) {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  invariant(isNumber(degrees), 'degrees must be a number');\r\n\r\n  const color = parseCSS(input, 'hsl');\r\n\r\n  const output = isHex(input) || isNamedColor(input) ? 'hex' : extractColorParts(input).model;\r\n\r\n  return formatCSS(\r\n    {\r\n      ...color,\r\n      h: constrainDegrees(color.h, degrees),\r\n    },\r\n    { format: format ?? output },\r\n  );\r\n}\r\n","import extractColorParts from '~/extract-color-parts';\r\nimport formatCSS from '~/format-css';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex, isNamedColor, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\nimport rotate from '~/rotate';\r\n\r\nimport { HEX } from '~/types';\r\n\r\n/**\r\n * Invert the color\r\n */\r\nexport default function invert(input: string) {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  const format = isHex(input) || isNamedColor(input) ? 'hex' : extractColorParts(input).model;\r\n  const hex = parseCSS(input, 'hex');\r\n\r\n  return formatCSS(rotate(hex, 180) as HEX, { format });\r\n}\r\n","import updater from '~/modules/updater';\r\n\r\nimport { Amount, ColorType } from '~/types';\r\n\r\n/**\r\n * Increase color lightness\r\n */\r\nexport default function lighten(input: string, amount: Amount, format?: ColorType) {\r\n  return updater('l', '+', format)(input, amount);\r\n}\r\n","import * as converters from '~/converters';\r\nimport extractColorParts from '~/extract-color-parts';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { addAlphaToHex } from '~/modules/hex-utils';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { addAlpha, limit } from '~/modules/utils';\r\nimport { isHex, isHSL, isLAB, isLCH, isPlainObject, isRGB, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { Colors, HSL, LAB, LCH, PlainObject, RGB } from '~/types';\r\n\r\nexport default function parseColor(color: string | HSL | LAB | LCH | RGB): Colors {\r\n  invariant(!!color, MESSAGES.input);\r\n\r\n  const output: PlainObject = {};\r\n\r\n  if (isString(color)) {\r\n    const { alpha = 1 } = extractColorParts(color);\r\n    const type = isHex(color) ? 'hex' : extractColorParts(color).model;\r\n\r\n    output.hex = addAlphaToHex(parseCSS(color, 'hex'), alpha);\r\n    output.hsl = addAlpha(parseCSS(color, 'hsl'), alpha);\r\n    output.oklab = addAlpha(parseCSS(color, 'oklab'), alpha);\r\n    output.oklch = addAlpha(parseCSS(color, 'oklch'), alpha);\r\n    output.rgb = addAlpha(parseCSS(color, 'rgb'), alpha);\r\n\r\n    output.alpha = alpha;\r\n    output.type = type;\r\n  } else if (isPlainObject(color)) {\r\n    const { alpha = 1 } = color;\r\n\r\n    if (isHSL(color)) {\r\n      output.hsl = {\r\n        h: limit(color.h, 'hsl', 'h'),\r\n        s: limit(color.s, 'hsl', 's'),\r\n        l: limit(color.l, 'hsl', 'l'),\r\n      };\r\n      output.rgb = converters.hsl2rgb(output.hsl);\r\n      output.oklab = converters.hsl2oklab(output.hsl);\r\n      output.oklch = converters.hsl2oklch(output.hsl);\r\n      output.type = 'hsl';\r\n    } else if (isLAB(color)) {\r\n      output.hsl = converters.oklab2hsl(color);\r\n      output.oklab = color;\r\n      output.oklch = converters.oklab2oklch(color);\r\n      output.rgb = converters.oklab2rgb(color);\r\n      output.type = 'oklab';\r\n    } else if (isLCH(color)) {\r\n      output.hsl = converters.oklch2hsl(color);\r\n      output.oklab = converters.oklch2oklab(color);\r\n      output.oklch = color;\r\n      output.rgb = converters.oklch2rgb(color);\r\n      output.type = 'oklch';\r\n    } else if (isRGB(color)) {\r\n      output.rgb = {\r\n        r: limit(color.r, 'rgb', 'r'),\r\n        g: limit(color.g, 'rgb', 'g'),\r\n        b: limit(color.b, 'rgb', 'b'),\r\n      };\r\n      output.hsl = converters.rgb2hsl(output.rgb);\r\n      output.oklab = converters.rgb2oklab(output.rgb);\r\n      output.oklch = converters.rgb2oklch(output.rgb);\r\n      output.type = 'rgb';\r\n    } else {\r\n      throw new Error('invalid color');\r\n    }\r\n\r\n    output.hex = addAlphaToHex(converters.hsl2hex(output.hsl), alpha);\r\n    output.hsl = addAlpha(output.hsl, alpha);\r\n    output.oklab = addAlpha(output.oklab, alpha);\r\n    output.oklch = addAlpha(output.oklch, alpha);\r\n    output.rgb = addAlpha(output.rgb, alpha);\r\n\r\n    output.alpha = alpha;\r\n  } else {\r\n    throw new Error(MESSAGES.input);\r\n  }\r\n\r\n  return output as Colors;\r\n}\r\n","import extractColorParts from '~/extract-color-parts';\r\nimport formatCSS from '~/format-css';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex, isNamedColor, isNumber, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { Alpha, ColorType } from '~/types';\r\n\r\n/**\r\n * Make the color transparent\r\n */\r\nexport default function opacify(input: string, alpha: Alpha, format?: ColorType): string {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  invariant(isNumber(alpha), MESSAGES.alpha);\r\n  const type = isHex(input) || isNamedColor(input) ? 'hex' : extractColorParts(input).model;\r\n\r\n  const rgb = parseCSS(input, 'rgb');\r\n\r\n  return formatCSS(rgb, { format: format ?? type, alpha });\r\n}\r\n","import extractColorParts from '~/extract-color-parts';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { cssColors } from '~/modules/css-colors';\r\nimport { extractAlphaFromHex } from '~/modules/hex-utils';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex, isString } from '~/modules/validators';\r\n\r\nexport default function opacity(input: string): number {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n\r\n  if (isHex(input)) {\r\n    return extractAlphaFromHex(input);\r\n  } else if (Object.keys(cssColors).includes(input)) {\r\n    return 1;\r\n  }\r\n\r\n  const { alpha } = extractColorParts(input);\r\n\r\n  if (!alpha) {\r\n    return 1;\r\n  }\r\n\r\n  return alpha;\r\n}\r\n","import updater from '~/modules/updater';\r\n\r\nimport { ColorType } from '~/types';\r\n\r\n/**\r\n * Increase color saturation\r\n */\r\nexport default function saturate(input: string, amount: number, format?: ColorType) {\r\n  return updater('s', '+', format)(input, amount);\r\n}\r\n","import hex2rgb from '~/converters/hex2rgb';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\nexport interface TextColorOptions {\r\n  /**\r\n   * The dark color to return if the input is light.\r\n   * @default '#000000'\r\n   */\r\n  darkColor?: string;\r\n  /**\r\n   * The light color to return if the input is dark.\r\n   * @default '#ffffff'\r\n   */\r\n  lightColor?: string;\r\n  /**\r\n   * The threshold to determine if the color is light or dark.\r\n   *\r\n   * A number between 0 and 255.\r\n   * @default 128\r\n   */\r\n  threshold?: number;\r\n}\r\n\r\n/**\r\n * Get the contrasted color for a given hex.\r\n */\r\nexport default function textColor(input: string, options: TextColorOptions = {}): string {\r\n  const { darkColor = '#000000', lightColor = '#ffffff', threshold = 128 } = options;\r\n\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  invariant(threshold >= 0 && threshold <= 255, MESSAGES.threshold);\r\n\r\n  try {\r\n    const { r, g, b } = hex2rgb(parseCSS(input, 'hex'));\r\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n\r\n    return yiq >= threshold ? darkColor : lightColor;\r\n  } catch (error) {\r\n    /* eslint-disable no-console */\r\n    console.warn(`Invalid color input: ${input}`);\r\n    console.warn(error);\r\n    /* eslint-enable no-console */\r\n\r\n    return darkColor; // Default to dark color in case of error\r\n  }\r\n}\r\n","import formatCSS from '~/format-css';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { clamp, round } from '~/modules/utils';\r\nimport { isNumber, isString } from '~/modules/validators';\r\nimport opacity from '~/opacity';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { Alpha, ColorType } from '~/types';\r\n\r\n/**\r\n * Increase the color transparency.\r\n */\r\nexport default function transparentize(input: string, alpha: Alpha, format?: ColorType): string {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  invariant(isNumber(alpha), MESSAGES.alpha);\r\n\r\n  invariant(alpha >= -1 && alpha <= 1, MESSAGES.alpha);\r\n\r\n  const oklch = parseCSS(input, 'oklab');\r\n\r\n  const value = round(clamp(opacity(input) - alpha, 0, 1));\r\n\r\n  return formatCSS(oklch, { format, alpha: value });\r\n}\r\n","import brightnessDifference from '~/brightness-difference';\r\nimport chroma from '~/chroma';\r\nimport colorDifference from '~/color-difference';\r\nimport compare from '~/compare';\r\nimport contrast from '~/contrast';\r\nimport darken from '~/darken';\r\nimport desaturate from '~/desaturate';\r\nimport formatCSS from '~/format-css';\r\nimport invert from '~/invert';\r\nimport lighten from '~/lighten';\r\nimport luminance from '~/luminance';\r\nimport { invariant } from '~/modules/invariant';\r\nimport parseColor from '~/modules/parse-color';\r\nimport opacify from '~/opacify';\r\nimport opacity from '~/opacity';\r\nimport rotate from '~/rotate';\r\nimport saturate from '~/saturate';\r\nimport textColor from '~/text-color';\r\nimport transparentize from '~/transparentize';\r\n\r\nimport { Alpha, Amount, Analysis, ColorType, Degrees, HEX, HSL, LAB, LCH, RGB } from '~/types';\r\n\r\nexport interface ColorizrOptions {\r\n  /**\r\n   * Output color format.\r\n   *\r\n   * If not specified, the output will use the same format as the input color.\r\n   */\r\n  format?: ColorType;\r\n}\r\n\r\nexport default class Colorizr {\r\n  public alpha: Alpha;\r\n  public hex: HEX;\r\n  public hsl: HSL;\r\n  public oklab: LAB;\r\n  public oklch: LCH;\r\n  public rgb: RGB;\r\n  public type: ColorType;\r\n\r\n  constructor(color: string | HSL | LAB | LCH | RGB, options: ColorizrOptions = {}) {\r\n    invariant(!!color, 'color is required');\r\n\r\n    const { alpha, hex, hsl, oklab, oklch, rgb, type } = parseColor(color);\r\n\r\n    this.hex = hex;\r\n    this.hsl = hsl;\r\n    this.oklab = oklab;\r\n    this.oklch = oklch;\r\n    this.rgb = rgb;\r\n\r\n    this.alpha = alpha;\r\n    this.type = options.format ?? type;\r\n  }\r\n\r\n  /**\r\n   * Get css string\r\n   */\r\n  get css(): string {\r\n    return this.selectedColor;\r\n  }\r\n\r\n  /**\r\n   * Get the red value\r\n   */\r\n  get red(): number {\r\n    return Number(this.rgb.r);\r\n  }\r\n\r\n  /**\r\n   * Get the green value\r\n   */\r\n  get green(): number {\r\n    return Number(this.rgb.g);\r\n  }\r\n\r\n  /**\r\n   * Get the blue value\r\n   */\r\n  get blue(): number {\r\n    return Number(this.rgb.b);\r\n  }\r\n\r\n  /**\r\n   * Get the hue value\r\n   */\r\n  get hue(): number {\r\n    return Number(this.hsl.h);\r\n  }\r\n\r\n  /**\r\n   * Get the saturation value\r\n   */\r\n  get saturation(): number {\r\n    return Number(this.hsl.s);\r\n  }\r\n\r\n  /**\r\n   * Get the lightness value\r\n   */\r\n  get lightness(): number {\r\n    return Number(this.hsl.l);\r\n  }\r\n\r\n  /**\r\n   * Get the luminance value\r\n   */\r\n  get luminance(): number {\r\n    return luminance(this.selectedColor);\r\n  }\r\n\r\n  /**\r\n   * Get the chroma value\r\n   */\r\n  get chroma(): number {\r\n    return chroma(this.selectedColor);\r\n  }\r\n\r\n  get opacity(): number {\r\n    return opacity(this.selectedColor);\r\n  }\r\n\r\n  /**\r\n   * Get the contrasted color\r\n   */\r\n  get textColor(): string {\r\n    return textColor(this.selectedColor);\r\n  }\r\n\r\n  private get selectedColor(): string {\r\n    return formatCSS(this[this.type], { format: this.type, alpha: this.alpha });\r\n  }\r\n\r\n  public brightnessDifference(input: string): number {\r\n    return brightnessDifference(this.selectedColor, input);\r\n  }\r\n\r\n  public colorDifference(input: string): number {\r\n    return colorDifference(this.selectedColor, input);\r\n  }\r\n\r\n  /**\r\n   * Test 2 colors for compliance\r\n   */\r\n  public compare(input: string): Analysis {\r\n    return compare(this.selectedColor, input);\r\n  }\r\n\r\n  public contrast(input: string): number {\r\n    return contrast(this.selectedColor, input);\r\n  }\r\n\r\n  public format(type: ColorType, precision?: number): string {\r\n    return formatCSS(this.rgb, {\r\n      alpha: this.alpha,\r\n      format: type,\r\n      precision,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Increase lightness\r\n   */\r\n  public lighten(amount: Amount): string {\r\n    return lighten(this.selectedColor, amount);\r\n  }\r\n\r\n  /**\r\n   * Decrease lightness\r\n   */\r\n  public darken(amount: Amount): string {\r\n    return darken(this.selectedColor, amount);\r\n  }\r\n\r\n  /**\r\n   * Increase saturation\r\n   */\r\n  public saturate(amount: Amount): string {\r\n    return saturate(this.selectedColor, amount);\r\n  }\r\n\r\n  /**\r\n   * Decrease saturation\r\n   */\r\n  public desaturate(amount: Amount): string {\r\n    return desaturate(this.selectedColor, amount);\r\n  }\r\n\r\n  /**\r\n   * Invert color\r\n   */\r\n  public invert(): string {\r\n    return invert(this.selectedColor);\r\n  }\r\n\r\n  /**\r\n   * Add opacity to the color.\r\n   */\r\n  public opacify(alpha: Alpha = 0.9): string {\r\n    return opacify(this.selectedColor, alpha, this.type);\r\n  }\r\n\r\n  /**\r\n   * Rotate color\r\n   */\r\n  public rotate(degrees: Degrees): string {\r\n    return rotate(this.selectedColor, degrees);\r\n  }\r\n\r\n  /**\r\n   * Make the color more transparent\r\n   */\r\n  public transparentize(alpha: Alpha = 0.1): string {\r\n    return transparentize(this.selectedColor, alpha, this.type);\r\n  }\r\n}\r\n","import formatCSS from '~/format-css';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { ColorType } from '~/types';\r\n\r\n/**\r\n * Convert a color string to another format.\r\n */\r\nexport default function convert(input: string, format: ColorType) {\r\n  const value = parseCSS(input, format);\r\n\r\n  return formatCSS(value, { format });\r\n}\r\n","import parseCSS from '~/parse-css';\r\n\r\nexport default function isValidColor(input: string): boolean {\r\n  try {\r\n    parseCSS(input);\r\n\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n","import { MESSAGES } from '~/modules/constants';\r\nimport { cssColors } from '~/modules/css-colors';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\n/**\r\n * Get the name of a color.\r\n * Returns the hex value if the color is not found.\r\n */\r\nexport default function name(input: string): string {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n\r\n  const hex = parseCSS(input, 'hex');\r\n\r\n  const [color] = Object.entries(cssColors).find(([, value]) => value === hex) || [];\r\n\r\n  return color ?? hex;\r\n}\r\n","import { oklch2oklab } from '~/converters';\r\nimport { LAB_TO_LMS, LSM_TO_RGB, MESSAGES, PRECISION, SRGB_TO_P3 } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { round } from '~/modules/utils';\r\nimport { isNumber, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { ColorTuple, LCH } from '~/types';\r\n\r\nfunction isInP3Gamut(color: ColorTuple): boolean {\r\n  const epsilon = 0.000001;\r\n\r\n  return color.every(component => component >= 0 - epsilon && component <= 1 + epsilon);\r\n}\r\n\r\nfunction multiplyMatrix(matrix: number[][], vector: ColorTuple): ColorTuple {\r\n  return [\r\n    matrix[0][0] * vector[0] + matrix[0][1] * vector[1] + matrix[0][2] * vector[2],\r\n    matrix[1][0] * vector[0] + matrix[1][1] * vector[1] + matrix[1][2] * vector[2],\r\n    matrix[2][0] * vector[0] + matrix[2][1] * vector[1] + matrix[2][2] * vector[2],\r\n  ];\r\n}\r\n\r\nfunction oklabToLinearP3(L: number, a: number, b: number): ColorTuple {\r\n  const srgb = oklabToLinearSRGB(L, a, b);\r\n\r\n  return multiplyMatrix(SRGB_TO_P3, srgb);\r\n}\r\n\r\nfunction oklabToLinearSRGB(L: number, a: number, b: number): ColorTuple {\r\n  const l = (L + LAB_TO_LMS.l[0] * a + LAB_TO_LMS.l[1] * b) ** 3;\r\n  const m = (L + LAB_TO_LMS.m[0] * a + LAB_TO_LMS.m[1] * b) ** 3;\r\n  const s = (L + LAB_TO_LMS.s[0] * a + LAB_TO_LMS.s[1] * b) ** 3;\r\n\r\n  return [\r\n    LSM_TO_RGB.r[0] * l + LSM_TO_RGB.r[1] * m + LSM_TO_RGB.r[2] * s,\r\n    LSM_TO_RGB.g[0] * l + LSM_TO_RGB.g[1] * m + LSM_TO_RGB.g[2] * s,\r\n    LSM_TO_RGB.b[0] * l + LSM_TO_RGB.b[1] * m + LSM_TO_RGB.b[2] * s,\r\n  ];\r\n}\r\n\r\n/**\r\n * Get the maximum chroma for a given lightness and hue in the OkLCH color space\r\n */\r\nexport function getOkLCHMaxChroma(input: string | LCH, precision = PRECISION): number {\r\n  const { l, h } = isString(input) ? parseCSS(input, 'oklch') : input;\r\n\r\n  invariant(isNumber(l) && l >= 0 && l <= 1, MESSAGES.lightnessRange);\r\n  invariant(isNumber(h) && h >= 0 && h <= 360, MESSAGES.hueRange);\r\n\r\n  // Binary search parameters\r\n  const epsilon = 0.000001;\r\n  let low = 0;\r\n  let high = 0.5; // Increased max theoretical chroma\r\n\r\n  while (high - low > epsilon) {\r\n    const mid = (low + high) / 2;\r\n    const { l: L, a, b } = oklch2oklab({ l, c: mid, h }, 16);\r\n\r\n    const p3Color = oklabToLinearP3(L, a, b);\r\n\r\n    if (isInP3Gamut(p3Color)) {\r\n      low = mid;\r\n    } else {\r\n      high = mid;\r\n    }\r\n  }\r\n\r\n  return round(low, precision);\r\n}\r\n\r\n/**\r\n * Get a OkLCH color in the P3 color space.\r\n */\r\nexport function getP3Color(input: string | LCH): string {\r\n  const lch = isString(input) ? parseCSS(input, 'oklch') : input;\r\n\r\n  return `oklch(${lch.l} ${getOkLCHMaxChroma(lch)} ${lch.h})`;\r\n}\r\n","import convert from '~/convert';\r\nimport hex2hsl from '~/converters/hex2hsl';\r\nimport hsl2hex from '~/converters/hsl2hex';\r\nimport extractColorParts from '~/extract-color-parts';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex, isNamedColor, isPlainObject, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\nimport rotate from '~/rotate';\r\n\r\nimport { ColorType, HEX } from '~/types';\r\n\r\nexport interface PaletteOptions {\r\n  /**\r\n   * Output color format.\r\n   *\r\n   * If not specified, the output will use the same format as the input color.\r\n   */\r\n  format?: ColorType;\r\n  /**\r\n   * Adjusts the lightness of the base color before generating the palette.\r\n   *\r\n   * Value should be between 0 and 100.\r\n   */\r\n  lightness?: number;\r\n  /**\r\n   * Adjusts the saturation of the base color before generating the palette.\r\n   *\r\n   * Value should be between 0 and 100.\r\n   */\r\n  saturation?: number;\r\n  /**\r\n   * The number of colors to generate in the palette.\r\n   *\r\n   * Minimum value is 2.\r\n   * @default 6\r\n   */\r\n  size?: number;\r\n  /**\r\n   * Generate a monochromatic palette.\r\n   *\r\n   * For more options, use the `swatch` function.\r\n   */\r\n  type?: 'monochromatic';\r\n}\r\n\r\nexport default function palette(input: string, options: PaletteOptions = {}): string[] {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  invariant(isPlainObject(options), MESSAGES.options);\r\n\r\n  const { format, lightness, saturation, size = 6, type } = options;\r\n  const hsl = parseCSS(input, 'hsl');\r\n  const colorFormat = isHex(input) || isNamedColor(input) ? 'hex' : extractColorParts(input).model;\r\n\r\n  const output: string[] = [];\r\n\r\n  if (type === 'monochromatic') {\r\n    const step = 80 / size;\r\n\r\n    for (let index = size; index > 0; index--) {\r\n      output.push(hsl2hex({ ...hsl, l: step * index }));\r\n    }\r\n  } else {\r\n    const step = 360 / size;\r\n\r\n    output.push(hsl2hex({ ...hsl, l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\r\n\r\n    for (let index = 1; index < size; index++) {\r\n      const color = rotate(input, hsl.h + step * index, 'hex') as HEX;\r\n\r\n      output.push(hsl2hex({ ...hex2hsl(color), l: lightness ?? hsl.l, s: saturation ?? hsl.s }));\r\n    }\r\n  }\r\n\r\n  return output.map(color => convert(color, format ?? colorFormat));\r\n}\r\n","import formatCSS from '~/format-css';\r\n\r\nimport { ColorType } from '~/types';\r\n\r\n/**\r\n * Generate a random color.\r\n */\r\nexport default function random(type: ColorType = 'hex'): string {\r\n  const hsl = {\r\n    h: Math.floor(Math.random() * 360) + 1,\r\n    s: Math.floor(Math.random() * 90) + 10,\r\n    l: Math.floor(Math.random() * 80) + 10,\r\n  };\r\n\r\n  return formatCSS(hsl, { format: type });\r\n}\r\n","import convert from '~/convert';\r\nimport extractColorParts from '~/extract-color-parts';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { isHex, isNamedColor, isString } from '~/modules/validators';\r\nimport rotate from '~/rotate';\r\n\r\nimport { ColorType } from '~/types';\r\n\r\nexport type Scheme =\r\n  | 'analogous'\r\n  | 'complementary'\r\n  | 'rectangle'\r\n  | 'split'\r\n  | 'split-complementary'\r\n  | 'square'\r\n  | 'tetradic'\r\n  | 'triadic';\r\n\r\nexport interface SchemeOptions {\r\n  /**\r\n   * Output color format.\r\n   *\r\n   * If not specified, the output will use the same format as the input color.\r\n   */\r\n  format?: ColorType;\r\n  /**\r\n   * The type of scheme to generate.\r\n   * @default 'complementary'\r\n   */\r\n  type?: Scheme;\r\n}\r\n\r\n/**\r\n * Get the scheme for a color.\r\n */\r\nexport default function scheme(input: string, typeOrOptions?: Scheme | SchemeOptions): string[] {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  const { format, type = 'complementary' } = isString(typeOrOptions)\r\n    ? { type: typeOrOptions }\r\n    : (typeOrOptions ?? {});\r\n\r\n  const output = isHex(input) || isNamedColor(input) ? 'hex' : extractColorParts(input).model;\r\n\r\n  const colors: string[] = [];\r\n\r\n  switch (type) {\r\n    case 'analogous': {\r\n      colors.push(rotate(input, -30), input, rotate(input, 30));\r\n      break;\r\n    }\r\n    case 'complementary': {\r\n      colors.push(input, rotate(input, 180));\r\n      break;\r\n    }\r\n\r\n    case 'split':\r\n    case 'split-complementary': {\r\n      colors.push(input, rotate(input, 150), rotate(input, 210));\r\n      break;\r\n    }\r\n    case 'triadic': {\r\n      colors.push(input, rotate(input, 120), rotate(input, 240));\r\n      break;\r\n    }\r\n\r\n    case 'tetradic':\r\n    case 'rectangle': {\r\n      colors.push(input, rotate(input, 60), rotate(input, 180), rotate(input, 240));\r\n      break;\r\n    }\r\n    case 'square': {\r\n      colors.push(input, rotate(input, 90), rotate(input, 180), rotate(input, 270));\r\n      break;\r\n    }\r\n    default: {\r\n      throw new TypeError('invalid type');\r\n    }\r\n  }\r\n\r\n  return colors.map(color => convert(color, format ?? output));\r\n}\r\n","import extractColorParts from '~/extract-color-parts';\r\nimport formatCSS from '~/format-css';\r\nimport { MESSAGES } from '~/modules/constants';\r\nimport { invariant } from '~/modules/invariant';\r\nimport { clamp } from '~/modules/utils';\r\nimport { isHex, isNamedColor, isString } from '~/modules/validators';\r\nimport parseCSS from '~/parse-css';\r\n\r\nimport { ColorTokens, ColorType, LCH } from '~/types';\r\n\r\nexport type Swatch = {\r\n  [key in ColorTokens]: string;\r\n};\r\n\r\nexport type SwatchVariant = 'deep' | 'neutral' | 'pastel' | 'subtle' | 'vibrant';\r\n\r\nexport interface SwatchOptions {\r\n  /**\r\n   * Output color format.\r\n   *\r\n   * Determines the format of the generated colors (e.g., HEX, RGB, OKLCH, etc.).\r\n   *\r\n   * If not specified, the output will match the format of the input color.\r\n   */\r\n  format?: ColorType;\r\n  /**\r\n   * The lightness tuning factor for the swatch.\r\n   * - 1: Linear lightness distribution.\r\n   * - >1: Lighter tones are emphasized.\r\n   * - <1: Darker tones are emphasized.\r\n   * @default 1.5\r\n   */\r\n  lightnessFactor?: number;\r\n  /**\r\n   * The maximum lightness value for the swatch.\r\n   *\r\n   * Defines the upper bound for the lightest color in the palette.\r\n   *\r\n   * A number between 0 and 1.\r\n   * @default 0.97\r\n   */\r\n  maxLightness?: number;\r\n  /**\r\n   * The minimum lightness value for the swatch.\r\n   *\r\n   * Defines the lower bound for the darkest color in the palette.\r\n   *\r\n   * A number between 0 and 1.\r\n   *\r\n   * @default 0.2\r\n   */\r\n  minLightness?: number;\r\n  /**\r\n   * Determines the scale type for the swatch.\r\n   * - 'fixed': Shades are distributed with pre-defined lightness intervals.\r\n   * - 'dynamic': Shades are distributed adaptively based on the input color.\r\n   * @default 'dynamic'\r\n   */\r\n  scale?: 'dynamic' | 'fixed';\r\n  /**\r\n   * The variant of the swatch.\r\n   * - 'deep': Generates rich and bold tones with significantly reduced lightness.\r\n   * - 'neutral': Generates muted tones by reducing chroma.\r\n   * - 'pastel': Produces soft and airy tones with significant chroma reduction.\r\n   * - 'subtle': Creates extremely desaturated tones, close to grayscale.\r\n   * - 'vibrant': Enhances chroma for bold and striking tones.\r\n   */\r\n  variant?: SwatchVariant;\r\n}\r\n\r\n/**\r\n * Generate a shade of a color based its lightness tuning factor\r\n */\r\nfunction shadeColor(input: LCH, lightness: number): LCH {\r\n  const { c, h } = input;\r\n\r\n  // Adjust chroma based on lightness to maintain perceptual uniformity\r\n  // Reduce chroma for very light and very dark colors\r\n  const chromaScale = c === 0 ? 1 : 4 * lightness * (1 - lightness);\r\n\r\n  // Calculate final chroma\r\n  const chroma = c * chromaScale;\r\n  const adjustedChroma = clamp(chroma, 0, 0.4);\r\n\r\n  return { l: lightness, c: adjustedChroma, h };\r\n}\r\n\r\n/**\r\n * Generate a swatch of colors based on the input color\r\n *\r\n * This utility is ideal for designers and developers who need dynamic color\r\n * palettes for UI themes, design systems, or data visualization. Supports\r\n * multiple modes, scales, and variants for flexibility.\r\n */\r\nexport default function swatch(input: string, options: SwatchOptions = {}): Swatch {\r\n  invariant(isString(input), MESSAGES.inputString);\r\n  const {\r\n    format,\r\n    lightnessFactor = 1.5,\r\n    maxLightness = 0.97,\r\n    minLightness = 0.2,\r\n    scale = 'dynamic',\r\n    variant = 'base',\r\n  } = options;\r\n\r\n  invariant(\r\n    maxLightness > minLightness && maxLightness <= 1 && minLightness >= 0,\r\n    'maxLightness must be greater than minLightness and within the range [0, 1].',\r\n  );\r\n\r\n  const lch = parseCSS(input, 'oklch');\r\n  const chromaScale = {\r\n    base: 1,\r\n    deep: 0.8,\r\n    neutral: 0.5,\r\n    pastel: 0.3,\r\n    subtle: 0.2,\r\n    vibrant: 1.25,\r\n  }[variant];\r\n\r\n  lch.l = 0.7;\r\n  lch.c *= chromaScale;\r\n\r\n  if (variant === 'deep') {\r\n    lch.l *= 0.7;\r\n  }\r\n\r\n  const colorFormat = isHex(input) || isNamedColor(input) ? 'hex' : extractColorParts(input).model;\r\n\r\n  const steps = 21;\r\n  let palette: Record<number, number> = {};\r\n\r\n  if (scale === 'dynamic') {\r\n    for (let index = 0; index < steps; index++) {\r\n      // Calculate lightness for this step\r\n      const lightness =\r\n        maxLightness - (maxLightness - minLightness) * (index / (steps - 1)) ** lightnessFactor;\r\n      let tone = index * 50;\r\n\r\n      palette[tone] = lightness;\r\n    }\r\n  } else {\r\n    palette = {\r\n      0: 1,\r\n      50: 0.95,\r\n      100: 0.9,\r\n      150: 0.85,\r\n      200: 0.8,\r\n      250: 0.75,\r\n      300: 0.7,\r\n      350: 0.65,\r\n      400: 0.6,\r\n      450: 0.55,\r\n      500: 0.5,\r\n      550: 0.45,\r\n      600: 0.4,\r\n      650: 0.35,\r\n      700: 0.3,\r\n      750: 0.25,\r\n      800: 0.2,\r\n      850: 0.15,\r\n      900: 0.1,\r\n      950: 0.05,\r\n      1000: 0,\r\n    };\r\n  }\r\n\r\n  const output = Object.entries(palette).reduce(\r\n    (acc, [key, value]) => {\r\n      acc[Number(key) as ColorTokens] = shadeColor(lch, value);\r\n\r\n      return acc;\r\n    },\r\n    {} as Record<ColorTokens, LCH>,\r\n  );\r\n\r\n  return Object.entries(output).reduce((acc, [key, value]) => {\r\n    return {\r\n      ...acc,\r\n      [key]: formatCSS(value, { format: format ?? colorFormat }),\r\n    };\r\n  }, {} as Swatch);\r\n}\r\n"],"mappings":"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","names":["factor","abs","chroma","chroma","sign","keys","alpha","colorDifference","contrast","brightnessDifference","opacity","chroma","palette"]}